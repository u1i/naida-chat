{
  "version": 3,
  "sources": ["../app.js"],
  "sourcesContent": ["import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// DOM Elements\nconst messageInput = document.getElementById('messageInput');\nconst sendButton = document.getElementById('sendButton');\nconst newChatButton = document.getElementById('newChatButton');\nconst chatMessages = document.getElementById('chatMessages');\nconst settingsBtn = document.getElementById('settingsBtn');\nconst settingsPanel = document.getElementById('settingsPanel');\nconst settingsOverlay = document.getElementById('settingsOverlay');\nconst themeToggle = document.getElementById('themeToggle');\nconst apiKeyInput = document.getElementById('apiKey');\nconst temperatureInput = document.getElementById('temperature');\nconst temperatureValue = document.getElementById('temperatureValue');\nconst systemPromptInput = document.getElementById('systemPrompt');\nconst testApiKeyBtn = document.getElementById('testApiKey');\nconst modelSelect = document.getElementById('modelSelect');\n\nlet chatSession = null;\nlet isProcessing = false;\n\n// Event Listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    loadSettings();\n    setupEventListeners();\n});\n\nfunction setupEventListeners() {\n    // Settings toggle\n    settingsBtn.onclick = () => {\n        settingsBtn.classList.toggle('active');\n        settingsPanel.classList.toggle('hidden');\n        settingsOverlay.classList.toggle('hidden');\n    };\n\n    // Close settings when clicking overlay\n    settingsOverlay.onclick = () => {\n        settingsBtn.classList.remove('active');\n        settingsPanel.classList.add('hidden');\n        settingsOverlay.classList.add('hidden');\n    };\n\n    // Close settings on escape key\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Escape' && !settingsPanel.classList.contains('hidden')) {\n            settingsBtn.classList.remove('active');\n            settingsPanel.classList.add('hidden');\n            settingsOverlay.classList.add('hidden');\n        }\n    });\n\n    // Test API key\n    testApiKeyBtn.onclick = async () => {\n        const apiKey = apiKeyInput.value.trim();\n        if (!apiKey) {\n            alert('Please enter an API key first');\n            return;\n        }\n\n        testApiKeyBtn.classList.add('loading');\n        testApiKeyBtn.textContent = 'Testing...';\n        testApiKeyBtn.disabled = true;\n\n        try {\n            // First test a simple generation to verify the API key\n            const genAI = new GoogleGenerativeAI(apiKey);\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\",\n            });\n            await model.generateContent('Test message. Please respond with \"OK\" if you receive this.');\n\n            // If successful, get available models\n            const models = await listAvailableModels(apiKey);\n            \n            // Update model selector\n            populateModelSelector(models);\n            \n            // Save models to localStorage\n            localStorage.setItem('availableModels', JSON.stringify(models));\n            localStorage.setItem('apiKey', apiKey);\n\n            testApiKeyBtn.classList.remove('loading');\n            testApiKeyBtn.classList.add('success');\n            testApiKeyBtn.textContent = '\u2713 API Key Valid';\n\n            // Reset button after 2 seconds\n            setTimeout(() => {\n                testApiKeyBtn.classList.remove('success');\n                testApiKeyBtn.textContent = 'Test API Key';\n                testApiKeyBtn.disabled = false;\n            }, 2000);\n\n        } catch (error) {\n            console.error('API Key test failed:', error);\n            testApiKeyBtn.classList.remove('loading');\n            testApiKeyBtn.classList.add('error');\n            testApiKeyBtn.textContent = '\u2715 Invalid API Key';\n\n            // Reset button after 2 seconds\n            setTimeout(() => {\n                testApiKeyBtn.classList.remove('error');\n                testApiKeyBtn.textContent = 'Test API Key';\n                testApiKeyBtn.disabled = false;\n            }, 2000);\n        }\n    };\n\n    // Theme toggle\n    themeToggle.onclick = () => {\n        const currentTheme = document.documentElement.getAttribute('data-theme');\n        const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n        document.documentElement.setAttribute('data-theme', newTheme);\n        localStorage.setItem('theme', newTheme);\n        themeToggle.innerHTML = `<i class=\"ri-${newTheme === 'light' ? 'sun' : 'moon'}-line\"></i>`;\n    };\n\n    // Send message\n    sendButton.onclick = sendMessage;\n    messageInput.onkeydown = (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n        }\n    };\n\n    // New chat\n    newChatButton.onclick = () => {\n        chatMessages.innerHTML = '';\n        chatSession = null;\n    };\n\n    // Settings changes\n    apiKeyInput.onchange = () => localStorage.setItem('apiKey', apiKeyInput.value);\n    temperatureInput.oninput = (e) => {\n        const value = e.target.value;\n        temperatureValue.textContent = value;\n        localStorage.setItem('temperature', value);\n    };\n    systemPromptInput.onchange = () => {\n        localStorage.setItem('systemPrompt', systemPromptInput.value);\n        const messageCount = chatMessages.querySelectorAll('.message:not(.welcome-message):not(.system-message)').length;\n        if (messageCount > 0) {\n            alert('Note: The new system prompt will only take effect when you start a new chat session. Click \"New Chat\" to start fresh with the new prompt.');\n        }\n    };\n    modelSelect.onchange = () => {\n        localStorage.setItem('selectedModel', modelSelect.value);\n        const messageCount = chatMessages.querySelectorAll('.message:not(.welcome-message):not(.system-message)').length;\n        if (messageCount > 0) {\n            alert('Note: The new model selection will only take effect when you start a new chat session. Click \"New Chat\" to start fresh with the new model.');\n        }\n    };\n}\n\nasync function listAvailableModels(apiKey) {\n    const response = await fetch('https://generativelanguage.googleapis.com/v1/models', {\n        headers: {\n            'x-goog-api-key': apiKey\n        }\n    });\n    \n    if (!response.ok) {\n        throw new Error('Failed to fetch models');\n    }\n    \n    const data = await response.json();\n    // Filter out embedding models and sort by displayName\n    return data.models.filter(model => \n        !model.name.includes('embedding') && \n        model.supportedGenerationMethods.includes('generateContent')\n    ).sort((a, b) => a.displayName.localeCompare(b.displayName));\n}\n\nfunction populateModelSelector(models) {\n    const modelSelect = document.getElementById('modelSelect');\n    modelSelect.innerHTML = ''; // Clear existing options\n    \n    models.forEach(model => {\n        const option = document.createElement('option');\n        // Extract the model name from the full path (e.g., \"models/gemini-1.5-flash\" -> \"gemini-1.5-flash\")\n        option.value = model.name.replace('models/', '');\n        option.textContent = model.displayName;\n        modelSelect.appendChild(option);\n    });\n\n    // Set default to Flash if it exists\n    const flashOption = Array.from(modelSelect.options).find(option => \n        option.value === 'gemini-1.5-flash'\n    );\n    if (flashOption) {\n        flashOption.selected = true;\n        localStorage.setItem('selectedModel', 'gemini-1.5-flash');\n    }\n}\n\nfunction loadSettings() {\n    const savedApiKey = localStorage.getItem('apiKey') || '';\n    apiKeyInput.value = savedApiKey;\n\n    const savedTemp = localStorage.getItem('temperature') || '1.0';\n    temperatureInput.value = savedTemp;\n    temperatureValue.textContent = savedTemp;\n\n    const defaultPrompt = 'You are a super duper assistant';\n    const savedPrompt = localStorage.getItem('systemPrompt') || defaultPrompt;\n    systemPromptInput.value = savedPrompt;\n\n    const savedTheme = localStorage.getItem('theme') || 'light';\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    themeToggle.innerHTML = `<i class=\"ri-${savedTheme === 'light' ? 'sun' : 'moon'}-line\"></i>`;\n\n    // Load saved models if they exist\n    const savedModels = localStorage.getItem('availableModels');\n    if (savedModels) {\n        const models = JSON.parse(savedModels);\n        populateModelSelector(models);\n    }\n\n    // Restore selected model if it exists\n    const savedSelectedModel = localStorage.getItem('selectedModel');\n    if (savedSelectedModel) {\n        const modelSelect = document.getElementById('modelSelect');\n        modelSelect.value = savedSelectedModel;\n    }\n}\n\nasync function initializeChat() {\n    const apiKey = apiKeyInput.value;\n    if (!apiKey) {\n        throw new Error('Please enter your API key in settings (gear icon)');\n    }\n\n    const genAI = new GoogleGenerativeAI(apiKey);\n    const selectedModel = modelSelect.value;\n    const model = genAI.getGenerativeModel({\n        model: selectedModel,\n        systemInstruction: systemPromptInput.value,\n    });\n\n    const generationConfig = {\n        temperature: parseFloat(temperatureInput.value),\n        topP: 0.95,\n        topK: 40,\n        maxOutputTokens: 8192,\n    };\n\n    return model.startChat({ generationConfig });\n}\n\nfunction addMessageToUI(role, content) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${role}-message`;\n    messageDiv.textContent = content;\n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\nfunction addTypingIndicator() {\n    const indicator = document.createElement('div');\n    indicator.className = 'message bot-message typing-indicator';\n    indicator.innerHTML = '<span></span><span></span><span></span>';\n    chatMessages.appendChild(indicator);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n    return indicator;\n}\n\nasync function sendMessage() {\n    if (isProcessing || !messageInput.value.trim()) return;\n\n    const message = messageInput.value.trim();\n    messageInput.value = '';\n\n    addMessageToUI('user', message);\n\n    try {\n        isProcessing = true;\n        sendButton.disabled = true;\n\n        if (!chatSession) {\n            chatSession = await initializeChat();\n        }\n\n        const typingIndicator = addTypingIndicator();\n        const result = await chatSession.sendMessage(message);\n        const response = result.response.text();\n        \n        typingIndicator.remove();\n        addMessageToUI('bot', response);\n\n    } catch (error) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'message error-message';\n        errorDiv.textContent = `Error: ${error.message}`;\n        chatMessages.appendChild(errorDiv);\n    } finally {\n        isProcessing = false;\n        sendButton.disabled = false;\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n    }\n}\n"],
  "mappings": "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",
  "names": ["GoogleGenerativeAI", "messageInput", "sendButton", "newChatButton", "chatMessages", "settingsBtn", "settingsPanel", "settingsOverlay", "themeToggle", "apiKeyInput", "temperatureInput", "temperatureValue", "systemPromptInput", "testApiKeyBtn", "modelSelect", "chatSession", "isProcessing", "loadSettings", "setupEventListeners", "apiKey", "models", "listAvailableModels", "populateModelSelector", "error", "newTheme", "sendMessage", "value", "response", "model", "a", "b", "option", "flashOption", "savedApiKey", "savedTemp", "savedPrompt", "savedTheme", "savedModels", "savedSelectedModel", "initializeChat", "genAI", "selectedModel", "generationConfig", "addMessageToUI", "role", "content", "messageDiv", "addTypingIndicator", "indicator", "message", "typingIndicator", "errorDiv"]
}
