{
  "version": 3,
  "sources": ["../app.js", "../js/settings.js", "../js/chatUI.js", "../js/chatManager.js", "../js/helpManager.js"],
  "sourcesContent": ["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { Settings } from './js/settings.js';\nimport { ChatUI } from './js/chatUI.js';\nimport { ChatManager } from './js/chatManager.js';\nimport { HelpManager } from './js/helpManager.js';\n\n// DOM Elements\nconst messageInput = document.getElementById('messageInput');\nconst sendButton = document.getElementById('sendButton');\nconst newChatButton = document.getElementById('newChatButton');\nconst chatMessages = document.getElementById('chatMessages');\nconst settingsBtn = document.getElementById('settingsBtn');\nconst settingsPanel = document.getElementById('settingsPanel');\nconst settingsOverlay = document.getElementById('settingsOverlay');\nconst themeToggle = document.getElementById('themeToggle');\nconst apiKeyInput = document.getElementById('apiKey');\nconst temperatureInput = document.getElementById('temperature');\nconst temperatureValue = document.getElementById('temperatureValue');\nconst systemPromptInput = document.getElementById('systemPrompt');\nconst testApiKeyBtn = document.getElementById('testApiKey');\nconst modelSelect = document.getElementById('modelSelect');\n\nlet chatSession = null;\nlet isProcessing = false;\n\n// Initialize components\nconst settings = new Settings();\nconst chatUI = new ChatUI();\nconst chatManager = new ChatManager(chatUI);\nconst helpManager = new HelpManager();\n\n// Event Listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    loadSettings();\n    setupEventListeners();\n});\n\nfunction setupEventListeners() {\n    // Chat input handlers\n    messageInput.addEventListener('keydown', (e) => {\n        if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            sendMessage();\n        }\n    });\n\n    sendButton.addEventListener('click', sendMessage);\n    newChatButton.addEventListener('click', () => {\n        chatMessages.innerHTML = '';\n        chatSession = null;\n    });\n\n    // Help panel handlers\n    const helpBtn = document.getElementById('helpBtn');\n    const helpPanel = document.getElementById('helpPanel');\n    const helpClose = document.getElementById('helpClose');\n    const helpOverlay = document.getElementById('helpOverlay');\n\n    helpBtn.onclick = () => {\n        helpPanel.classList.remove('hidden');\n        helpOverlay.classList.remove('hidden');\n    };\n\n    helpClose.onclick = () => {\n        helpPanel.classList.add('hidden');\n        helpOverlay.classList.add('hidden');\n    };\n\n    helpOverlay.onclick = () => {\n        helpPanel.classList.add('hidden');\n        helpOverlay.classList.add('hidden');\n    };\n\n    // Test API key\n    testApiKeyBtn.onclick = async () => {\n        const apiKey = apiKeyInput.value.trim();\n        if (!apiKey) {\n            alert('Please enter an API key first');\n            return;\n        }\n\n        testApiKeyBtn.classList.add('loading');\n        testApiKeyBtn.textContent = 'Testing...';\n        testApiKeyBtn.disabled = true;\n\n        try {\n            // First test a simple generation to verify the API key\n            const genAI = new GoogleGenerativeAI(apiKey);\n            const model = genAI.getGenerativeModel({\n                model: \"gemini-1.5-flash\",\n            });\n            await model.generateContent('Test message. Please respond with \"OK\" if you receive this.');\n\n            // If successful, get available models\n            const models = await listAvailableModels(apiKey);\n            \n            // Update model selector\n            populateModelSelector(models);\n            \n            // Save models to localStorage\n            localStorage.setItem('availableModels', JSON.stringify(models));\n            localStorage.setItem('apiKey', apiKey);\n\n            testApiKeyBtn.classList.remove('loading');\n            testApiKeyBtn.classList.add('success');\n            testApiKeyBtn.textContent = '\u2713 API Key Valid';\n\n            // Reset button after 2 seconds\n            setTimeout(() => {\n                testApiKeyBtn.classList.remove('success');\n                testApiKeyBtn.textContent = 'Test API Key';\n                testApiKeyBtn.disabled = false;\n            }, 2000);\n\n        } catch (error) {\n            console.error('API Key test failed:', error);\n            testApiKeyBtn.classList.remove('loading');\n            testApiKeyBtn.classList.add('error');\n            testApiKeyBtn.textContent = '\u2715 Invalid API Key';\n\n            // Reset button after 2 seconds\n            setTimeout(() => {\n                testApiKeyBtn.classList.remove('error');\n                testApiKeyBtn.textContent = 'Test API Key';\n                testApiKeyBtn.disabled = false;\n            }, 2000);\n        }\n    };\n\n    // Theme toggle\n    themeToggle.onclick = () => {\n        const currentTheme = document.documentElement.getAttribute('data-theme');\n        const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n        document.documentElement.setAttribute('data-theme', newTheme);\n        localStorage.setItem('theme', newTheme);\n        themeToggle.innerHTML = `<i class=\"ri-${newTheme === 'light' ? 'sun' : 'moon'}-line\"></i>`;\n    };\n\n    // Settings changes\n    apiKeyInput.onchange = () => localStorage.setItem('apiKey', apiKeyInput.value);\n    temperatureInput.oninput = (e) => {\n        const value = e.target.value;\n        temperatureValue.textContent = value;\n        localStorage.setItem('temperature', value);\n    };\n    systemPromptInput.onchange = () => {\n        localStorage.setItem('systemPrompt', systemPromptInput.value);\n        const messageCount = chatMessages.querySelectorAll('.message:not(.welcome-message):not(.system-message)').length;\n        if (messageCount > 0) {\n            alert('Note: The new system prompt will only take effect when you start a new chat session. Click \"New Chat\" to start fresh with the new prompt.');\n        }\n    };\n    modelSelect.onchange = () => {\n        localStorage.setItem('selectedModel', modelSelect.value);\n        const messageCount = chatMessages.querySelectorAll('.message:not(.welcome-message):not(.system-message)').length;\n        if (messageCount > 0) {\n            alert('Note: The new model selection will only take effect when you start a new chat session. Click \"New Chat\" to start fresh with the new model.');\n        }\n    };\n}\n\nasync function listAvailableModels(apiKey) {\n    const response = await fetch('https://generativelanguage.googleapis.com/v1/models', {\n        headers: {\n            'x-goog-api-key': apiKey\n        }\n    });\n    \n    if (!response.ok) {\n        throw new Error('Failed to fetch models');\n    }\n    \n    const data = await response.json();\n    // Filter out embedding models and sort by displayName\n    return data.models.filter(model => \n        !model.name.includes('embedding') && \n        model.supportedGenerationMethods.includes('generateContent')\n    ).sort((a, b) => a.displayName.localeCompare(b.displayName));\n}\n\nfunction populateModelSelector(models) {\n    const modelSelect = document.getElementById('modelSelect');\n    modelSelect.innerHTML = ''; // Clear existing options\n    \n    models.forEach(model => {\n        const option = document.createElement('option');\n        // Extract the model name from the full path (e.g., \"models/gemini-1.5-flash\" -> \"gemini-1.5-flash\")\n        option.value = model.name.replace('models/', '');\n        option.textContent = model.displayName;\n        modelSelect.appendChild(option);\n    });\n\n    // Set default to Flash if it exists\n    const flashOption = Array.from(modelSelect.options).find(option => \n        option.value === 'gemini-1.5-flash'\n    );\n    if (flashOption) {\n        flashOption.selected = true;\n        localStorage.setItem('selectedModel', 'gemini-1.5-flash');\n    }\n}\n\nfunction loadSettings() {\n    const savedApiKey = localStorage.getItem('apiKey') || '';\n    apiKeyInput.value = savedApiKey;\n\n    const savedTemp = localStorage.getItem('temperature') || '1.0';\n    temperatureInput.value = savedTemp;\n    temperatureValue.textContent = savedTemp;\n\n    const defaultPrompt = 'You are a super duper assistant';\n    const savedPrompt = localStorage.getItem('systemPrompt') || defaultPrompt;\n    systemPromptInput.value = savedPrompt;\n\n    const savedTheme = localStorage.getItem('theme') || 'light';\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    themeToggle.innerHTML = `<i class=\"ri-${savedTheme === 'light' ? 'sun' : 'moon'}-line\"></i>`;\n\n    // Load saved models if they exist\n    const savedModels = localStorage.getItem('availableModels');\n    if (savedModels) {\n        const models = JSON.parse(savedModels);\n        populateModelSelector(models);\n    }\n\n    // Restore selected model if it exists\n    const savedSelectedModel = localStorage.getItem('selectedModel');\n    if (savedSelectedModel) {\n        const modelSelect = document.getElementById('modelSelect');\n        modelSelect.value = savedSelectedModel;\n    }\n}\n\nasync function initializeChat() {\n    const apiKey = apiKeyInput.value;\n    if (!apiKey) {\n        throw new Error('Please enter your API key in settings (gear icon)');\n    }\n\n    const genAI = new GoogleGenerativeAI(apiKey);\n    const selectedModel = modelSelect.value;\n    const model = genAI.getGenerativeModel({\n        model: selectedModel,\n    });\n\n    const generationConfig = {\n        temperature: parseFloat(temperatureInput.value),\n        topP: 0.95,\n        topK: 40,\n        maxOutputTokens: 8192,\n    };\n\n    return model.startChat({\n        generationConfig,\n        history: [\n            {\n                role: \"user\",\n                parts: [{ text: \"From now on, you must follow this system prompt: \" + systemPromptInput.value }],\n            },\n            {\n                role: \"model\",\n                parts: [{ text: \"I understand and will follow the system prompt: \" + systemPromptInput.value }],\n            }\n        ],\n    });\n}\n\nfunction addMessageToUI(role, content) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `message ${role}-message`;\n    messageDiv.textContent = content;\n    chatMessages.appendChild(messageDiv);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n}\n\nfunction addTypingIndicator() {\n    const indicator = document.createElement('div');\n    indicator.className = 'message bot-message typing-indicator';\n    indicator.innerHTML = '<span></span><span></span><span></span>';\n    chatMessages.appendChild(indicator);\n    chatMessages.scrollTop = chatMessages.scrollHeight;\n    return indicator;\n}\n\nasync function sendMessage() {\n    if (isProcessing || !messageInput.value.trim()) return;\n\n    const message = messageInput.value.trim();\n    messageInput.value = '';\n\n    addMessageToUI('user', message);\n\n    try {\n        isProcessing = true;\n        sendButton.disabled = true;\n\n        if (!chatSession) {\n            chatSession = await initializeChat();\n        }\n\n        const typingIndicator = addTypingIndicator();\n        const result = await chatSession.sendMessage(message);\n        const response = result.response.text();\n        \n        typingIndicator.remove();\n        addMessageToUI('bot', response);\n\n    } catch (error) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'message error-message';\n        errorDiv.textContent = `Error: ${error.message}`;\n        chatMessages.appendChild(errorDiv);\n    } finally {\n        isProcessing = false;\n        sendButton.disabled = false;\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n    }\n}\n", "export class Settings {\n    constructor() {\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            this.initialize();\n        }\n    }\n\n    initialize() {\n        this.loadSettings();\n        this.setupThemeToggle();\n        this.setupSettingsPanel();\n    }\n\n    loadSettings() {\n        this.apiKey = localStorage.getItem('apiKey') || '';\n        this.temperature = parseFloat(localStorage.getItem('temperature')) || 1.0;\n        this.systemPrompt = localStorage.getItem('systemPrompt') || 'You are a helpful assistant.';\n        this.theme = localStorage.getItem('theme') || 'light';\n\n        // Apply saved settings to UI\n        document.getElementById('apiKey').value = this.apiKey;\n        document.getElementById('temperature').value = this.temperature;\n        document.getElementById('temperatureValue').textContent = this.temperature;\n        document.getElementById('systemPrompt').value = this.systemPrompt;\n        document.documentElement.setAttribute('data-theme', this.theme);\n    }\n\n    setupThemeToggle() {\n        const themeToggle = document.getElementById('themeToggle');\n        const themeIcon = themeToggle.querySelector('i');\n\n        themeToggle.addEventListener('click', () => {\n            const newTheme = this.theme === 'light' ? 'dark' : 'light';\n            this.theme = newTheme;\n            document.documentElement.setAttribute('data-theme', newTheme);\n            themeIcon.className = `ri-${newTheme === 'light' ? 'sun' : 'moon'}-line`;\n            localStorage.setItem('theme', newTheme);\n        });\n    }\n\n    setupSettingsPanel() {\n        const settingsBtn = document.querySelector('#settingsBtn');\n        const settingsPanel = document.querySelector('#settingsPanel');\n        const settingsClose = document.querySelector('#settingsClose');\n        const closeIcon = document.querySelector('#settingsClose i');\n        const settingsOverlay = document.querySelector('#settingsOverlay');\n\n        // Basic close function\n        function closePanel() {\n            settingsPanel.classList.add('hidden');\n            settingsOverlay.classList.add('hidden');\n        }\n\n        // Basic open function\n        function openPanel() {\n            settingsPanel.classList.remove('hidden');\n            settingsOverlay.classList.remove('hidden');\n        }\n\n        // Settings button opens panel\n        settingsBtn.addEventListener('click', openPanel);\n\n        // Close button AND its icon both close panel\n        settingsClose.addEventListener('click', closePanel, true);\n        closeIcon.addEventListener('click', closePanel, true);\n\n        // Overlay closes panel\n        settingsOverlay.addEventListener('click', closePanel);\n\n        // Escape key closes panel\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') closePanel();\n        });\n\n        // Settings changes\n        const temperatureInput = document.querySelector('#temperature');\n        const temperatureValue = document.querySelector('#temperatureValue');\n        const apiKeyInput = document.querySelector('#apiKey');\n        const systemPromptInput = document.querySelector('#systemPrompt');\n\n        temperatureInput.addEventListener('input', (e) => {\n            const value = parseFloat(e.target.value);\n            temperatureValue.textContent = value.toFixed(1);\n            this.temperature = value;\n            localStorage.setItem('temperature', value);\n        });\n\n        apiKeyInput.addEventListener('change', (e) => {\n            this.apiKey = e.target.value;\n            localStorage.setItem('apiKey', e.target.value);\n        });\n\n        systemPromptInput.addEventListener('change', (e) => {\n            this.systemPrompt = e.target.value;\n            localStorage.setItem('systemPrompt', e.target.value);\n        });\n    }\n\n    getSettings() {\n        return {\n            apiKey: this.apiKey,\n            temperature: this.temperature,\n            systemPrompt: this.systemPrompt\n        };\n    }\n}\n", "export class ChatUI {\n    constructor(chatManager, settings) {\n        this.chatManager = chatManager;\n        this.settings = settings;\n        this.messageInput = document.getElementById('messageInput');\n        this.sendButton = document.getElementById('sendButton');\n        this.newChatButton = document.getElementById('newChatButton');\n        this.chatMessages = document.getElementById('chatMessages');\n        this.isProcessing = false;\n    }\n\n    initialize() {\n        this.setupEventListeners();\n    }\n\n    setupEventListeners() {\n        this.sendButton.addEventListener('click', () => this.sendMessage());\n        this.newChatButton.addEventListener('click', () => this.startNewChat());\n        \n        this.messageInput.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage();\n            }\n        });\n    }\n\n    async sendMessage() {\n        if (this.isProcessing || !this.messageInput.value.trim()) return;\n\n        const message = this.messageInput.value.trim();\n        \n        // Disable input and button while processing\n        this.isProcessing = true;\n        this.messageInput.disabled = true;\n        this.messageInput.value = '';\n        this.messageInput.style.height = 'auto';\n        this.sendButton.disabled = true;\n        \n        // Add user message to UI\n        this.addMessageToUI('user', message);\n        \n        // Show typing indicator\n        const typingIndicator = this.addTypingIndicator();\n        \n        try {\n            // Get response from chat manager with retry logic\n            const response = await this.chatManager.sendMessage(message);\n            \n            // Remove typing indicator and add response\n            typingIndicator.remove();\n            this.addMessageToUI('bot', response);\n            \n        } catch (error) {\n            typingIndicator.remove();\n            this.addErrorMessage(error.message);\n        } finally {\n            // Re-enable input and button\n            this.isProcessing = false;\n            this.messageInput.disabled = false;\n            this.sendButton.disabled = false;\n            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n            \n            // Set focus back to input\n            this.messageInput.focus();\n        }\n    }\n\n    addMessageToUI(role, content) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${role}-message`;\n        messageDiv.textContent = content;\n        this.chatMessages.appendChild(messageDiv);\n        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n    }\n\n    addTypingIndicator() {\n        const indicator = document.createElement('div');\n        indicator.className = 'message bot-message typing-indicator';\n        indicator.innerHTML = '<span></span><span></span><span></span>';\n        this.chatMessages.appendChild(indicator);\n        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;\n        return indicator;\n    }\n\n    addErrorMessage(error) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'message error-message';\n        errorDiv.textContent = `Error: ${error}`;\n        this.chatMessages.appendChild(errorDiv);\n    }\n\n    startNewChat() {\n        this.chatMessages.innerHTML = '';\n        this.chatManager.clearChat();\n    }\n}\n", "import { GoogleGenerativeAI } from '@google/generative-ai';\n\nexport class ChatManager {\n    constructor(settings) {\n        this.settings = settings;\n        this.chatHistory = [];\n        this.chatSession = null;\n    }\n\n    async initializeChat() {\n        const { apiKey, temperature, systemPrompt } = this.settings.getSettings();\n        \n        if (!apiKey) {\n            throw new Error('Please enter your API key in settings (gear icon)');\n        }\n\n        const genAI = new GoogleGenerativeAI(apiKey);\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-1.5-flash\",\n            systemInstruction: systemPrompt,\n        });\n\n        const generationConfig = {\n            temperature,\n            topP: 0.95,\n            topK: 40,\n            maxOutputTokens: 8192,\n            responseMimeType: \"text/plain\",\n        };\n\n        this.chatSession = model.startChat({\n            generationConfig,\n            history: this.chatHistory,\n        });\n    }\n\n    async sendMessage(message, retryCount = 0) {\n        if (!this.chatSession) {\n            await this.initializeChat();\n        }\n\n        try {\n            const result = await this.chatSession.sendMessage(message);\n            const response = result.response.text();\n\n            // Update chat history\n            this.chatHistory.push(\n                { role: \"user\", parts: [{ text: message }] },\n                { role: \"model\", parts: [{ text: response }] }\n            );\n\n            return response;\n        } catch (error) {\n            console.error('Error sending message:', error);\n            \n            // Check if it's a rate limit error (429)\n            const is429Error = error.message?.includes('429') || \n                             error.message?.includes('Resource has been exhausted') ||\n                             error.status === 429;\n\n            if (is429Error && retryCount < 3) {\n                console.log(`Rate limit hit, retrying in 10 seconds... (Attempt ${retryCount + 1}/3)`);\n                \n                // Wait 10 seconds before retrying\n                await new Promise(resolve => setTimeout(resolve, 10000));\n                \n                // Retry the request\n                return this.sendMessage(message, retryCount + 1);\n            }\n            \n            // If we've exhausted retries or it's a different error, throw with a user-friendly message\n            if (is429Error) {\n                throw new Error('The AI service is currently busy. Please try again in a few minutes.');\n            } else {\n                throw new Error(error.message || 'An error occurred while sending the message.');\n            }\n        }\n    }\n\n    clearChat() {\n        this.chatHistory = [];\n        this.chatSession = null;\n    }\n}\n", "import { marked } from 'https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js';\n\nexport class HelpManager {\n    constructor() {\n        this.contents = {\n            help: '',\n            privacy: ''\n        };\n        this.currentDoc = 'help';\n        this.docsPath = './docs/';\n        \n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            this.initialize();\n        }\n    }\n\n    async initialize() {\n        const helpBtn = document.getElementById('helpBtn');\n        const helpPanel = document.getElementById('helpPanel');\n        const helpOverlay = document.getElementById('helpOverlay');\n        const helpContent = helpPanel.querySelector('.help-content');\n\n        // Load all content at startup\n        await Promise.all([\n            this.loadContent('help'),\n            this.loadContent('privacy')\n        ]);\n\n        // Toggle help when clicking help button\n        helpBtn.addEventListener('click', () => {\n            helpPanel.classList.remove('hidden');\n            helpOverlay.classList.remove('hidden');\n            helpContent.innerHTML = marked.parse(this.contents[this.currentDoc]);\n        });\n\n        // Add tab buttons for switching between help and privacy\n        const tabsHtml = `\n            <div class=\"help-tabs\">\n                <button class=\"help-tab active\" data-doc=\"help\">Help & FAQ</button>\n                <button class=\"help-tab\" data-doc=\"privacy\">Privacy Policy</button>\n            </div>\n        `;\n        helpContent.insertAdjacentHTML('beforebegin', tabsHtml);\n\n        // Handle tab switching\n        const tabs = helpPanel.querySelectorAll('.help-tab');\n        tabs.forEach(tab => {\n            tab.addEventListener('click', () => {\n                // Update active tab\n                tabs.forEach(t => t.classList.remove('active'));\n                tab.classList.add('active');\n\n                // Display cached content\n                const doc = tab.dataset.doc;\n                this.currentDoc = doc;\n                helpContent.innerHTML = marked.parse(this.contents[doc]);\n            });\n        });\n    }\n\n    async loadContent(doc) {\n        try {\n            const response = await fetch(`${this.docsPath}${doc}.md`);\n            if (!response.ok) throw new Error(`Failed to load ${doc} content`);\n            this.contents[doc] = await response.text();\n        } catch (error) {\n            console.error('Error loading help content:', error);\n            this.contents[doc] = '# Error\\nFailed to load content. Please try again later.';\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["GoogleGenerativeAI", "Settings", "themeToggle", "themeIcon", "newTheme", "settingsBtn", "settingsPanel", "settingsClose", "closeIcon", "settingsOverlay", "closePanel", "openPanel", "e", "temperatureInput", "temperatureValue", "apiKeyInput", "systemPromptInput", "value", "ChatUI", "chatManager", "settings", "message", "typingIndicator", "response", "error", "role", "content", "messageDiv", "indicator", "errorDiv", "GoogleGenerativeAI", "ChatManager", "settings", "apiKey", "temperature", "systemPrompt", "model", "generationConfig", "message", "retryCount", "response", "error", "is429Error", "resolve", "marked", "HelpManager", "helpBtn", "helpPanel", "helpOverlay", "helpContent", "tabs", "tab", "t", "doc", "response", "error", "messageInput", "sendButton", "newChatButton", "chatMessages", "settingsBtn", "settingsPanel", "settingsOverlay", "themeToggle", "apiKeyInput", "temperatureInput", "temperatureValue", "systemPromptInput", "testApiKeyBtn", "modelSelect", "chatSession", "isProcessing", "settings", "Settings", "chatUI", "ChatUI", "chatManager", "ChatManager", "helpManager", "HelpManager", "loadSettings", "setupEventListeners", "e", "sendMessage", "helpBtn", "helpPanel", "helpClose", "helpOverlay", "apiKey", "GoogleGenerativeAI", "models", "listAvailableModels", "populateModelSelector", "error", "newTheme", "value", "response", "model", "a", "b", "option", "flashOption", "savedApiKey", "savedTemp", "savedPrompt", "savedTheme", "savedModels", "savedSelectedModel", "initializeChat", "genAI", "selectedModel", "generationConfig", "addMessageToUI", "role", "content", "messageDiv", "addTypingIndicator", "indicator", "message", "typingIndicator", "errorDiv"]
}
